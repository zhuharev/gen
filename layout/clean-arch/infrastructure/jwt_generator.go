// Code generated by https://github.com/zhuharev/gen DO NOT EDIT.

package infrastructure

import (
	"context"
	"fmt"
	"os"
	"time"

	jwt "github.com/dgrijalva/jwt-go"
)

// JwtGenerator generate token for id
type JwtGenerator interface {
	GenerateAccessToken(ctx context.Context, id int) (string, error)
	ValidateToken(ctx context.Context, token string) (int, error)
}

// jwtGenerator can generate and validate access tokens
type jwtGenerator struct {
	issuer string
	secret string
}

const issuer = "genApp"

// NewJWTGenerator returns jwt generator
func NewJWTGenerator() JwtGenerator {
	return jwtGenerator{secret: os.Getenv("SECRET")}
}

// newClaims returns new claims
func (a jwtGenerator) newClaims(userID int) *Claims {
	return &Claims{
		UserID: userID,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(time.Hour * 24 * 60).Unix(),
			Issuer:    a.issuer,
		},
	}
}

func (a jwtGenerator) GenerateAccessToken(_ context.Context, userID int) (string, error) {
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, a.newClaims(userID))

	tokenString, err := token.SignedString([]byte(a.secret))
	return tokenString, err
}

func (a jwtGenerator) ValidateToken(_ context.Context, token string) (int, error) {
	t, err := jwt.ParseWithClaims(token, &Claims{}, func(token *jwt.Token) (interface{}, error) {
		// Don't forget to validate the alg is what you expect:
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}
		return []byte(a.secret), nil
	})
	if err != nil {
		return 0, err
	}

	if claims, ok := t.Claims.(*Claims); ok && t.Valid {
		if err := claims.Valid(); err != nil {
			return 0, err
		}
		return claims.UserID, nil
	}
	return 0, fmt.Errorf("session expired or invalid")
}

// Claims is jwt payload
type Claims struct {
	UserID int    `json:"id,omitempty"`
	Login  string `json:"email,omitempty"`
	jwt.StandardClaims
}
