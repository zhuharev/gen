// Code generated by https://github.com/zhuharev/gen DO NOT EDIT.

package infrastructure

import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"sync"
)

var (
	ErrNotFound = errors.New("not found")
)

// Database interface used in repos
type Database interface {
	Create(context.Context, interface{}) error
	Update(context.Context, interface{}) error
	UpdateField(context.Context, interface{}, Field, ...Field) error
	GetByID(context.Context, int, interface{}) error
	GetByField(context.Context, string, interface{}, interface{}) error
	GetByFields(context.Context, []Field, interface{}) error
	List(context.Context, interface{}, ...ListOptions) error
	ListByField(context.Context, string, interface{}, interface{}, ...ListOptions) error
	ListByFields(context.Context, []Field, interface{}, ...ListOptions) error
	CountByFields(context.Context, []Field, interface{}) (int, error)
	Delete(context.Context, interface{}) error
	RunInTransaction(context.Context, func(context.Context, Database) error) error
	ColumnByName(name string) string
}

type Field struct {
	Name        string
	Value       interface{}
	CompareType CompareType
}

type CompareType int

const (
	CompareTypeEquals CompareType = iota
	CompareTypeIn
	CompareTypeGreater
	CompareTypeGE
	CompareTypeLess
	CompareTypeLE
	CompareTypeNull
	CompareTypeLike
	CompareTypeILike
)

type ListOptions struct {
	Page     int
	PageSize int
}

var (
	registeredDatabases = map[string]func(dsn string) (Database, error){}
	regMu               sync.Mutex
)

func RegisterDatabase(driver string, fn func(dsn string) (Database, error)) error {
	regMu.Lock()
	defer regMu.Unlock()
	log.Println("registre driver:", driver)
	registeredDatabases[driver] = fn
	return nil
}

// ConnectDatabase connect to database and return Database wrapped connection
func ConnectDatabase(dsn string) (Database, error) {
	arr := strings.Split(dsn, "://")
	if len(arr) != 2 {
		return nil, fmt.Errorf("bad dsn")
	}
	log.Printf("driver=%s dsn=%s", arr[0], arr[1])
	return registeredDatabases[arr[0]](arr[1])
}
