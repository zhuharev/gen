// Code generated by https://github.com/zhuharev/gen DO NOT EDIT.

package main

import (
    "context"
    "net/http"
    "encoding/json"
)

type Client struct {
    c *http.Client
    baseURL string
}

func New(baseURL string) *Client {
    return &Client {
        baseURL: baseURL,
        c: &http.Client{
            Timeout: 10*time.Second,
        },
    }
}

type ErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (c *Client) call(ctx context.Context, httpMethod, method string, params interface{}, to interface{}) error {
    body, err := json.Marshal(params)
    if err != nil {
        return err 
    }
    req, err:= http.NewRequest(httpMethod, c.baseURL + method, bytes.NewReader(body))
    if err != nil {
        return err 
    }
    req = req.WithContext(ctx)
    req.Header.Set("Content-Type", "application/json")
    resp, err := c.c.Do(req)
    if err != nil {
        return err 
    }
    defer resp.Body.Close()
    body, err = ioutil.ReadAll(resp.Body)
    if err != nil {
        return err 
    }
    if resp.StatusCode != 200 {
        var er ErrorResponse
        err = json.Unmarshal(body, &er)
        if err !=nil {
            return err 
        }
        return fmt.Errorf("error code=%d msg=%s", er.Code, er.Message)
    }
    err = json.Unmarshal(body, to)
    return err 
}


{{ range  (domainServices .project) }}
{{ $service := .}}
{{ range .Methods }}

type {{ titleName $service.Plural }}{{ titleName .Name }}Request struct {
	{{ range .Args}}
	{{ titleName .Name }} {{ removePackage (goType2 $.project .Column) "domain" }} `json:"{{ jsonName .ModelName .Name }}"`
	{{ end }}
}

type {{ titleName $service.Plural }}{{ titleName .Name }}Response struct {
	{{ range .Return }}
	{{if isModel $.project .}}
	{{ titleName .Name }} {{ deliveryType $.project . }} `json:"{{ jsonName .ModelName .Name }}"`
	{{ else }}
	{{ titleName .Name }} {{ goType2 $.project . }} `json:"{{ jsonName .ModelName .Name }}"`
	{{ end }}
	//*domain.{{ titleName .Name }}
	{{ end }}
}

func (c *Client) {{ titleName $service.Plural }}{{ titleName .Name }}(ctx context.Context, {{range  .Args }}{{ .Name }} {{ removePackage (goType2 $.project .Column) "domain" }}, {{end}}) ({{ range .Return }} {{ .Name }} {{ removePackage (goType2 $.project .) "domain" }} ,{{ end }}err error) {
    req := {{ titleName $service.Plural }}{{ titleName .Name }}Request{
        {{range  .Args }}{{ titleName .Name }}: {{ .Name }},
        {{end}}
    }
    var res {{ titleName $service.Plural }}{{ titleName .Name }}Response
    err = c.call(ctx, "{{ httpRESTMethod . }}", {{ if (hasParam . )}}"{{ $service.Plural }}/"+strconv.Itoa({{ (index .Args 0).Name }}){{else}}"{{ $service.Plural }}/{{ .Name }}"{{end}}, req, &res)
    {{ range .Return }}{{ .Name }} = res.{{ titleName .Name }}
    {{ end }}
    return
}
{{ end }}
{{ end }}

{{ range .project.Models }}{{ $model := . }}

{{ range enumColumns $model }}{{ $column := . }}

type {{ titleName $model.Name }}{{ titleName .Name }} int

const (
  {{ range $i, $e := .Enums }}{{ titleName $model.Name }}{{ titleName $column.Name }}{{ titleName $e.Name }}{{ if eq $i 0}} {{ titleName $model.Name }}{{ titleName $column.Name }} = iota + 1 {{ end }}
  {{ end }}
)

func (v {{ titleName $model.Name }}{{ titleName .Name }}) Int() int {
  return int(v)
}

{{ end }}

type {{ titleName .Name }} struct { {{ range .Columns }}
  {{ titleName .Name }}     {{ removePackage (goType2 $.project .) "domain" }} {{ if  eq (titleName .Name) "ID"}} `storm:"id,increment"` {{end}} {{ end }}
}
{{ end }}