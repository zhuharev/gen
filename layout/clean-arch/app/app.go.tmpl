// Code generated by https://github.com/zhuharev/gen DO NOT EDIT.

package app

import (
    "fmt"
    "log"

    "{{ $.project.GoModule }}/infrastructure"
    _ "{{ $.project.GoModule }}/infrastructure/database/storm"
    "{{ $.project.GoModule }}/infrastructure/job"
    {{ range  (domainServices .project) }}
    "{{ $.project.GoModule }}/domain/{{ .Name }}"
    //{{ .Name }}RepoPkg "{{ $.project.GoModule }}/domain/{{ .Name }}/repo"
    //{{ .Name }}UcPkg "{{ $.project.GoModule }}/domain/{{ .Name }}/usecase"
    {{ end }}
    {{ range (infrastructureServices .project) }}
    "{{ $.project.GoModule }}/infrastucture/{{ .Name }}"
    {{end}}
    {{ range (integrationServices .project) }}
    "{{ $.project.GoModule }}/integration/{{ .Name }}"
    {{end}}

    "github.com/labstack/echo/v4"
    "github.com/labstack/echo/v4/middleware"
    "go.uber.org/zap"
)

type App struct {
    *zap.Logger

 {{ range  (domainServices .project) }}
    {{ .Name }}Uc {{ .Name }}.Usecase
 {{ end }}

  {{ range  (integrationServices .project) }}
{{ .Name }}Uc  {{ .Name }}.Usecase
 {{end}}

    jwtGeneratorUc infrastructure.JwtGenerator
    echo *echo.Echo

    cfg Config
}

// New creates new App
func New(logger *zap.Logger, cfg Config) (*App, error) {

    log.Println("connect to database:", cfg.DB.DSN)
    db, err:= infrastructure.ConnectDatabase(cfg.DB.DSN)
    if err != nil {
        return nil, fmt.Errorf("connect to database err:%w", err)
    }

    jwtGeneratorUc := infrastructure.NewJWTGenerator()

     {{ range  (integrationServices .project) }}
    {{.Name}}Uc := {{ .Name }}.NewUsecase(logger, {{range .Deps}}{{ .Name }}Uc,{{end}})
 {{ end }}

     {{ range  (domainServices .project) }}
    {{ .Name }}Repo :=  {{ .Name }}.NewRepo(db)
    {{.Name}}Uc := {{ .Name }}.NewUsecase(logger, cfg.{{ titleName .Name }}, {{ .Name }}Repo, {{range .Deps}}{{ .Name }}Uc,{{end}})
 {{ end }}

	return &App{
        Logger: logger,
		echo: echo.New(),
        jwtGeneratorUc: jwtGeneratorUc,
        cfg: cfg,

		 {{ range  (domainServices .project) }}
    {{ .Name }}Uc:  {{ .Name }}Uc,
 {{ end }}
 {{ range  (integrationServices .project) }}
{{ .Name }}Uc:  {{ .Name }}Uc,
 {{end}}
	}, nil
}

type runHook interface {
    BeforeRun() error
}

// Run starts http server
func (a *App) Run() error {
    if hooker, ok := interface{}(a).(runHook); ok {
        err := hooker.BeforeRun()
        if err !=nil {
            return err
        }
    }
	a.registreHandlers()

    job.Run({{ range backgroundMethods .project }}
        job.Job{
            Name: "{{ .Name }}",
            Func: a.{{ .Name }},
            Interval: {{ parsePeriod .RunInBackground.Config }},
        },{{ end }}
    )

    a.echo.Use(middleware.CORS())
	return a.echo.Start(":" + os.Getenv("PORT"))
}
