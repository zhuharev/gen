// Code generated by https://github.com/zhuharev/gen DO NOT EDIT.

package domain

import (
  "time"
  "regexp"

  "github.com/nbutton23/zxcvbn-go"
)

type FieldError struct {
  FieldName string `json:"fieldName"`
  Description string `json:"description"`
}

var (
  emailRe = regexp.MustCompile(`(?i)^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,5})$`)
  phoneRe = regexp.MustCompile(`^[0-9]{10}$`)
  cyrillicRe = regexp.MustCompile(`^\p{Cyrillic}+$`)
  aliasRe = regexp.MustCompile(`^[a-z][\w\.]+$`)
)

var Columns = struct {
  {{ range .project.Models }}{{ $model := . }}
  {{ titleName $model.Name }} struct { {{ range .Columns }}
    {{ titleName .Name }} string
    {{ end }}
  }
  {{ end }}
} {
 {{ range .project.Models }}{{ $model := . }}
  {{ titleName $model.Name }}: struct { {{ range .Columns }}
    {{ titleName .Name }} string
    {{ end }}
  } {
  {{ range .Columns }}
    {{ titleName .Name }}: "{{ titleName .Name }}",
    {{ end }}  
  },
  {{ end }}
}

{{ range .project.Models }}{{ $model := . }}

{{ range enumColumns $model }}{{ $column := . }}

type {{ titleName $model.Name }}{{ titleName .Name }} int

const (
  {{ range $i, $e := .Enums }}{{ titleName $model.Name }}{{ titleName $column.Name }}{{ titleName $e.Name }}{{ if eq $i 0}} {{ titleName $model.Name }}{{ titleName $column.Name }} = iota + 1 {{ end }}
  {{ end }}
)

func (v {{ titleName $model.Name }}{{ titleName .Name }}) Int() int {
  return int(v)
}

{{ end }}

// {{ titleName .Name }} describe model
type {{ titleName .Name }} struct { {{ range .Columns }}
  {{ titleName .Name }}     {{ removePackage (goType2 $.project .) "domain" }} {{ if  eq (titleName .Name) "ID"}} `storm:"id,increment"` {{ else if .Validation}}{{if .Validation.Unique}}`storm:"unique"`{{end}}{{else if (and .IsRelationField .IDsField)}}`json:"-"`{{ end }}{{ end }}
}

func (s {{ titleName $model.Name }}) Validate() []FieldError {
  var res []FieldError
  {{ range .Columns }}
  if isValid, description := s.Validate{{ titleName .Name }}(); !isValid {
    res = append(res, FieldError{FieldName: "{{ jsonName .ModelName .Name }}", Description: description})
  }{{ end }}
  return res
}

{{ range .Columns }}func (s {{ titleName $model.Name }}) Validate{{ titleName .Name }}() (isValid bool, errDescription string) {
  {{ if .Validation }} {{ $column := . }}
  {{ range .Validation.CustomFunctions }}
  isValid, errDescription = {{ .Name }}(s.{{ titleName $column.Name }})
  if !isValid {
    return
  }
  {{ end }}
  {{ end }}
  {{ if eq .Type "enum" }}
  {{ if .Validation }}
  {{ if .Validation.Required}}
  if s.{{ titleName .Name }}.Int() == 0 {
    errDescription = "Required"
    isValid = false
    return
  }
  {{end}}
  {{ end }}
  {{ end }}
  {{ if eq .Type "password" }}
  passwordStrength := zxcvbn.PasswordStrength(s.{{ titleName .Name }}, nil)
  if s.{{ titleName .Name }} != "" && passwordStrength.Score < 3 {
    errDescription = "Weak password"
    isValid = false
    return
  } else if s.{{ titleName .Name }} != "" && len(s.{{ titleName .Name }}) < 6 {
    errDescription = "Weak password"
    isValid = false
    return    
  }
  {{ end }}
{{ if .Validation }}
  {{ if eq .Type "int" }}
    {{- if .Validation.Required -}}
  if s.{{ titleName .Name }} == 0 {
    errDescription = "Required"
    isValid = false
    return
  }
    {{ end }}
  {{ else if eq .Type "string" }}
    {{ if .Validation.Required }}
  if s.{{ titleName .Name }} == "" {
    errDescription = "Required"
    isValid = false
    return
  }
    {{ end }}
    {{ if .Validation.IsCyrillic }}
  if s.{{ titleName .Name }} != "" && !cyrillicRe.MatchString(s.{{ titleName .Name }}) {
    errDescription = "Must be cyrillic"
    isValid = false
    return    
  }
    {{ end }}
    {{ if .Validation.IsAlias }}
  if s.{{ titleName .Name }} != "" && !aliasRe.MatchString(s.{{ titleName .Name }}) {
    errDescription = "Must be lowercase word. Must starts with letter. Can contain _ and . (dot)"
    isValid = false
    return    
  }
    {{ end }}
    {{ if .Validation.IsPhone }}
  if s.{{ titleName .Name }} != "" && !phoneRe.MatchString(s.{{ titleName .Name }}) || (s.{{ titleName .Name }}[0] != '7' && s.{{ titleName .Name }}[0] != '9' ) {
    errDescription = "10 digits of phone number without spaces or separators (e.g. 9001234567)"
    isValid = false
    return
  }
    {{ end }}
    {{ if .Validation.IsEmail }}
  if s.{{ titleName .Name }} != "" && emailRe.FindString(s.{{ titleName .Name }}) == "" {
    errDescription = "Bad email"
    isValid = false
    return
  }
    {{ end }}
    {{ if .Validation.Min }}
  if s.{{ titleName .Name }} != "" && len([]rune(s.{{ titleName .Name }})) < {{ .Validation.Min.Value }} {
    errDescription = "{{ .Validation.Min.Description }}"
    isValid = false
    return    
  }
    {{ end }}
    {{ if .Validation.Max }}
  if s.{{ titleName .Name }} != "" && len([]rune(s.{{ titleName .Name }})) > {{ .Validation.Max.Value }} {
    errDescription = "{{ .Validation.Max.Description }}"
    isValid = false
    return    
  }
    {{ end }}
  {{ else if or (eq .Type "time") (eq .Type "date") }}
    {{ if .Validation.Required }}
  if s.{{ titleName .Name }}.IsZero() {
    errDescription = "Required"
    isValid = false
    return
  }
    {{ end }}
    {{ if .Validation.MinAge }}
  minAge := time.Duration({{ parsePeriod .Validation.MinAge.Value }})
  minAgeReached := s.{{ titleName .Name }}.Add(minAge)
  if time.Now().Before(minAgeReached) {
    errDescription = "{{ .Validation.MinAge.Description }}"
    isValid = false
    return
  }
    {{ end }}
    {{ if .Validation.MaxAge }}
  maxAge := time.Duration({{ parsePeriod .Validation.MaxAge.Value}})
  maxAgeReached := s.{{ titleName .Name }}.Add(maxAge)
  if time.Now().After(maxAgeReached) {
    errDescription = "{{ .Validation.MaxAge.Description }}"
    isValid = false
    return
  }
    {{ end }}
  {{ end }}
{{ end }}
  isValid = true
  return 
}
{{end}}
{{ end }}